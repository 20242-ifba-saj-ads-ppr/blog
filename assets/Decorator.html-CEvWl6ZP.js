import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as t,o as r}from"./app-CPDrDel3.js";const s={};function i(n,e){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="decorator" tabindex="-1"><a class="header-anchor" href="#decorator"><span>Decorator</span></a></h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>Dinamicamente, agregar responsabilidades adicionais a um objeto. Os Decorators fornecem uma alternativa flexível ao uso de subclasses para extensão de funcionalidades.</p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Com o decorador, podemos adicionar funcionalidades a um objeto sem ter que alterar a classe do objeto.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><p>Wrapper</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Considere que um desenvolvedor queira criar um jogo semelhante ao <a href="https://play.google.com/store/apps/details?id=com.xq.archeroii&amp;hl=pt_BR" target="_blank" rel="noopener noreferrer">Archero 2</a>. Nesse tipo de jogo, o personagem pode ser equipado com vários itens, como armas, armaduras e acessórios. Esses itens são coletados durante a partida e podem ser usados para aumentar as habilidades do personagem. Cada novo item adiciona uma nova habilidade ao personagem sem remover as habilidades existentes, criando novas camadas de comportamento.</p><p>Sem a utilização do padrão Decorator, o desenvolvedor precisaria criar uma nova classe para cada combinação de habilidades que poderia ser utilizada pelo personagem. Isso pode levar a um número excessivo de classes e tornar o código mais difícil de manter.</p><figure><img src="https://www.plantuml.com/plantuml/svg/XP6x2i8m58RtFCKXavTsS9TI4GIXWxiu7D9W0qrQanG4yTrD6bjRQt5Ayb_Eno6fiQXj8ql2IZG6JboRIk6LItWGW3WJncwFbii4XENAE6tDRuseKI-S89Va-MxwKEW8PI57LNLtYn9LuPzhh4l1NBNkCPy1Eyqgu7T7oVjfdPUXuNhEF233ESyFtLTo5F5Q55hJv9WKea7x8awoNloJTUTeoq4bQessHmQVG3SKuWJeYeRDo0WTn-T2v3bNbryOaZg8-zeN" alt=""><figcaption>Exemplo de como o jogo pode ser implementado sem o padrão Decorator</figcaption></figure><p>O padrão Decorator permite que o desenvolvedor adicione novas funcionalidades a um objeto sem alterar sua classe. Isso é feito utilizando a composição e delegação, onde um objeto é composto por outros objetos e os métodos são delegados para os objetos compostos.</p><figure><img src="https://www.plantuml.com/plantuml/svg/VP112i9034NtEKMMBJ8N41SLH12yH8n12jDEII88jNTtj8YCIdV9__yb8OqvgL-x27GoLs97ZcI61vSEHq1SuVYs9gGXjanQ3QAMUhf8LyC4Cx5LJYWtb_vSu4lCCxOJJagUz1SEsEPo_H9oMwQhZrSlB8AI2ccUzYLlxY7WaKmK_pbxOe8c7vS_zG00" alt=""><figcaption>Exemplo de como o jogo pode ser implementado com o padrão Decorator</figcaption></figure><p>Com essa nova implementação, o desenvolvedor pode adicionar novos itens ao jogo sem precisar criar novas classes para cada combinação de habilidades. Isso torna o código mais flexível e fácil de manter.</p><p>Item item = new Arco();<br> item = new Laser(item);// adiciona laser<br> item = new Faca(item);// adiciona faca</p><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="https://www.plantuml.com/plantuml/svg/dP91JiGm34NtFeMN85GEa0KQ1cx04h4mgPb6j76Lc16echkJ8ZKf3TsmS-Byv_-j7A9Iq8-XX_Zk_4Y11koTP_qQ6ILe9m10hr43MKNRKupu8CCedhtY18WtE2tz2yh8WTI9lxesU1RNmWKMaRU1bOkOFvLz-mk7Fxnzo2DRIIq9jNYsqg1TZgPqTfaRPnb-d-bbthH3cM-fRRbzKb8sc1RX_AbAdK77_x2FtD7PILXxBt9fxbPXwpqtpvrB5FzIHi8VcSkpsZI05sKCxjGfobi16MDNQyxrxIeCfBGuoxUGUemnMPTec-Y5SqXL-h7V" alt=""><figcaption>Estrutura do Decorator</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li>Component (Item) <ul><li>define a interface para objetos que podem ter responsabilidades acrescenta das aos mesmos dinamicamente.</li></ul></li><li>ConcreteComponent (Arco) <ul><li>define um objeto para o qual responsabilidades adicionais podem ser atribuídas.</li></ul></li><li>Decorator (ItemDecorator) <ul><li>mantém uma referência para um objeto Component e define uma interface que segue a interface de Component.</li></ul></li><li>ConcreteDecorator (Laser,Faca) <ul><li>acrescenta responsabilidades ao componente.</li></ul></li></ul><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',22)]))}const l=a(s,[["render",i]]),m=JSON.parse('{"path":"/posts/GOF/estruturais/Decorator.html","title":"Decorator","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2025-02-10T23:21:00.000Z","tag":["Decorator","gof"],"category":["aula"],"order":2,"excerpt":"Apresentação do Padrão de Projeto Decorator"},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":1741729686000,"updatedTime":1741787891000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":4}]},"readingTime":{"minutes":1.21,"words":364},"filePathRelative":"posts/GOF/estruturais/Decorator.md","localizedDate":"10 de fevereiro de 2025"}');export{l as comp,m as data};
