import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as t,o as r}from"./app-B00BQOfF.js";const s={};function i(c,e){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="factory-method" tabindex="-1"><a class="header-anchor" href="#factory-method"><span>Factory Method</span></a></h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Definir uma interface para criar um objeto, mas deixar as subclasses decidirem que classe instanciar. O Factory Method permite adiar a instanciação para subclasses.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><p>Virtual Constructor</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Considere um sistema de gestão de documentos para escritórios. Ele deve ser capaz de criar documentos em diferentes formatos, como <code>docx</code>, <code>pptx</code> e <code>xlsx</code>.</p><p>O tratamento de cada formato de documento é feito por uma classe específica. Essas classes são responsáveis por criar e manipular os documentos em seus respectivos formatos.</p><figure><img src="https://www.plantuml.com/plantuml/svg/rLJ12i8m3BttAtfKP7_WOKC_GF0YY8VIbgrGsx9cOo3-k-jqcenvtmw3vYLByruUpIE86fgxPVdtnAGLCVAZbrt_DNVjW3yOvpj-XjguafSQ3jv1Zs-s0zvwetZyePyw-GvnZMWr_iS7xN0ihO-a8FIDw2rzXoAEDmG1rPOznv5F0TOsyiN6zOnCB95TAwEKTZSYEoCx-DLWdjXXHR162Z3U9V8PTPr20Hg_rWBqY4-9pk69pXm-y9vB30hzwrH4bA7ccx8XOWGiqzBPf7rDsH2lTdYXosL3_BJFiedfg5rJdgwH4SufJuLXBDTE3Q_cv_02" alt="uml diagram" loading="lazy"><figcaption>Diagrama de classes do sistema de gestão de documentos</figcaption></figure><p>Os frameworks usam classes abstratas para definir e manter relacionamentos entre objetos. Um framework é frequentemente responsável também pela criação desses objetos</p><p>Refatorando o código para usar o padrão Factory Method, podemos criar uma classe abstrata chamada <code>Document</code> que será a representação de um documento genérico. Essa classe terá métodos abstratos para criar, abrir, salvar, imprimir e salvar como.</p><p>Devemos ter uma classe abstrata chamada <code>Aplication</code> que será a representação de uma aplicação genérica. Essa classe terá métodos abstratos para criar, abrir, salvar, imprimir e salvar como documento.</p><p>A classe <code>Aplication</code> terá um método chamado <code>createDocument</code> que será responsável por criar um documento, mas nesse momento não sabemos qual tipo de documento será criado. Esse método será abstrato e será implementado pelas subclasses, postergando a decisão de qual tipo de documento será criado.</p><figure><img src="https://www.plantuml.com/plantuml/svg/hLH1Ri8m4BplA_POLC43g5g1w0EGUkdL60DM7QzbBuYAylVQ9WbE0bpQIsJlpevdnbPcWONdVMLWrgx2bxPEU56XqLRnjrD8ddS485Q1lP2CqeWGy9talbAMyGI8p_Z1NjijRXKlo7AiFuro_K1wZU5QhN7oiYqnug3A6NBAbdjfA7G0BX9rJuaCyz2Su0JlHd0Uw9uxewLWJRPMtXfPrujkzTJCdr5w9LWrdRxOM_KawLOzQx_Lo2xlCSr3qOdEukxOwXoFnpzlhMnOEhxR-pJXRW-WlTvZ4PKwnkjQFqfl4CwvPafA_eSfwVuhqoMrOYJwp_QlYK1FSKQKUK9FI0QKeG9OOeL6RHXfKmYSJikN4iLE9fFuRLuUlWualrn0Y12zOgAjoLV4J5MYxngQui9hWVkgPQMuGjQECh8_tJNxQ3eX-zFT91vD9oJCeedqbsaMlm00" alt="uml diagram" loading="lazy"><figcaption>Diagrama de classes do sistema de gestão de documentos refatorado</figcaption></figure><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="https://www.plantuml.com/plantuml/svg/ZP51Zi8m34NtEOMN84GFK1Yf4kiHN26qPeZKsfNZ0gCHTyT0MuQCGBD9BEN_zt_a8geNxPhQ5UFa0YdApfS86-6gAnL-7C0C3Xmgu1R5Qs2QJDtPkRBsCSAAgHHK7FIXQMjia3J-0-6tKSMRf6S9UcNf3QDzK9t1cjdxzoVgdYj3Z5nFwtVb1Z2U5Abw5PJI3UFIxotdATH4n8eWuMklmBi1dkU_IbbEbcLsjZtd8qrRz1Bh1rVU7-fpQfu_-KU-IJeX83occxb6FE25ZRVTt-yB" alt="uml diagram" loading="lazy"><figcaption>Estrutura do padrão Factory Method</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li><strong>Product (Document)</strong>: Representa o produto que será criado pelo Creator.</li><li><strong>ConcreteProduct (DocxDocument, PptxDocument, XlsxDocument)</strong>: Representa um produto concreto que será criado pelo Creator.</li><li><strong>Creator (Aplication)</strong>: É a classe abstrata que define o método de fábrica que será implementado pelas subclasses.</li><li><strong>ConcreteCreator (DocxAplication, PptxAplication, XlsxAplication)</strong>: Representa uma classe concreta que implementa o método de fábrica.</li></ul><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',22)]))}const l=a(s,[["render",i],["__file","Factory_Method.html.vue"]]),m=JSON.parse('{"path":"/posts/GOF/criacionais/Factory_Method.html","title":"Factory Method","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2025-02-10T23:21:00.000Z","tag":["Factory Method","gof"],"category":["aula"],"order":10,"excerpt":"Apresentação do Padrão de Projeto Factory Method"},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":1741729686000,"updatedTime":1741729686000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":2.1,"words":630},"filePathRelative":"posts/GOF/criacionais/Factory_Method.md","localizedDate":"10 de fevereiro de 2025"}');export{l as comp,m as data};
