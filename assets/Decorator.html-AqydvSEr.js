import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as t,o as r}from"./app-bpxcm_Gm.js";const i={};function n(s,e){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="decorator" tabindex="-1"><a class="header-anchor" href="#decorator"><span>Decorator</span></a></h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>Dinamicamente, agregar responsabilidades adicionais a um objeto. Os Decorators fornecem uma alternativa flexível ao uso de subclasses para extensão de funcionalidades.</p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Com o decorador, podemos adicionar funcionalidades a um objeto sem ter que alterar a classe do objeto.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><p>Wrapper</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="https://www.plantuml.com/plantuml/svg/dP91JiGm34NtFeMN85GEa0Kg0pTWYLX4gPb6j7QLc16Z4NSd1P64XX4IgpYn_xE_bJwg3VewJz3dABvuNcomCqwUIOyBeGGT1G3SP6F4EvaNOMB54o1UeImKh7hXYqk31_43lETATe6KYeBUb7ZumS0_8FVa9AKajEArVuVk-sfAvYnpCrc6tsPwwNVEtlfgXu661xLA1gC6p_l6TGRj_iFUqMWFNa8zUv5BTrEPRVVSFOu-KVYfj8HVF9UoTcW05YKCVZygodC16UEgDUVukZ83oIskyYsaRMDCrYNQndh5wLFu-L6_pWy0" alt="uml diagram" loading="lazy"><figcaption>Estrutura do Decorator</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li>Component <ul><li>define a interface para objetos que podem ter responsabilidades acrescenta das aos mesmos dinamicamente.</li></ul></li><li>ConcreteComponent <ul><li>define um objeto para o qual responsabilidades adicionais podem ser atribuídas.</li></ul></li><li>Decorator <ul><li>mantém uma referência para um objeto Component e define uma interface que segue a interface de Component.</li></ul></li><li>ConcreteDecorator <ul><li>acrescenta responsabilidades ao componente.</li></ul></li></ul><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',15)]))}const d=a(i,[["render",n],["__file","Decorator.html.vue"]]),m=JSON.parse('{"path":"/posts/GOF/estruturais/Decorator.html","title":"Decorator","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2025-02-10T23:21:00.000Z","tag":["Decorator","gof"],"category":["aula"],"order":2,"excerpt":"Apresentação do Padrão de Projeto Decorator"},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":1741729686000,"updatedTime":1741730115000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":2}]},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"posts/GOF/estruturais/Decorator.md","localizedDate":"10 de fevereiro de 2025"}');export{d as comp,m as data};
